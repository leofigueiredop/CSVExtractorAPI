package services

import (
	"CSVExtractor/models"
	"encoding/csv"
	"fmt"
	"github.com/google/uuid"
	"io"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"sync"
)

var lock = &sync.Mutex{}

type UUIDMessage struct {
	TableName string
	UUID      string
}

func LoadCSVToDB_CB(filePath string) {

	db := &Database{}
	err := db.Open()
	if err != nil {
		log.Fatalf("Failed to open database: %v", err)
	}
	defer db.Close()

	db.InitTables()

	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read input file: %s", err)
	}
	defer file.Close()
	//
	//tables := []string{"PEP", "CNEP", "CEIS", "AutosInfracaoIbama", "AutosInfracaoICMBIO", "TrabalhoEscravo", "Suspensaobama", "ApreensaoIbama"}
	//fields := []string{"CPF", "CPFCNPJSanctioned", "CPFCNPJSanctioned", "CpfCnpjInfrator", "CPFCNPJ", "CNPJCPF", "CPF_CNPJ_PESSOA_SUSPENSAO", "CPF_CNPJ_PESSOA_SUSPENSAO"}
	//stmts := make(map[string]*sql.Stmt)
	//for i, table := range tables {
	//	if table == "PEP" {
	//		stmt, err := db.DB.Prepare(fmt.Sprintf("SELECT UUID FROM %s WHERE %s LIKE ?", table, fields[i]))
	//		if err != nil {
	//			log.Fatalf("Error preparing statement for table %s: %s", table, err)
	//		}
	//		stmts[table] = stmt
	//	} else {
	//		stmt, err := db.DB.Prepare(fmt.Sprintf("SELECT UUID FROM %s WHERE %s = ?", table, fields[i]))
	//		if err != nil {
	//			log.Fatalf("Error preparing statement for table %s: %s", table, err)
	//		}
	//		stmts[table] = stmt
	//	}
	//}

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'
	// Ignorar o cabeçalho
	_, err = csvReader.Read()
	if err != nil {
		log.Fatalf("Erro ao ler o arquivo CSV: %s", err)
	}
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading CSV file: %s", err)
		}

		value, err := strconv.Atoi(record[1])
		if err != nil {
			log.Fatalf("Error converting string to int: %s", err)
		}
		cpfCnpj := ""
		switch record[0] {
		case "PF":
			cpfCnpj = fmt.Sprintf("%011d", value)
		case "PJ":
			cpfCnpj = fmt.Sprintf("%014d", value)
		}

		cadastro := models.CadastroBasico{
			UUID:       uuid.NewString(),
			TipoPessoa: record[0],
			CPF_CNPJ:   cpfCnpj,
		}

		//var wg sync.WaitGroup
		//messages := make(chan UUIDMessage)
		//
		//for table, stmt := range stmts {
		//	wg.Add(1)
		//	go func(table string, stmt *sql.Stmt, cpf string) {
		//		defer wg.Done()
		//
		//		var id string
		//		if err := stmt.QueryRow("%" + cpf + "%").Scan(&id); err != nil {
		//			if err == sql.ErrNoRows {
		//				return
		//			}
		//			log.Printf("Error executing query for table %s: %s", table, err)
		//			return
		//		}
		//		uuidMsg := UUIDMessage{
		//			TableName: table,
		//			UUID:      id,
		//		}
		//		messages <- uuidMsg
		//	}(table, stmt, cpfCnpj)
		//}
		//
		//go func() {
		//	wg.Wait()
		//	close(messages)
		//}()

		//for uuidMsg := range messages {
		//	switch uuidMsg.TableName {
		//	case "PEP":
		//		cadastro.PEP = uuidMsg.UUID
		//	case "CNEP":
		//		cadastro.CNEP = uuidMsg.UUID
		//	case "CEIS":
		//		cadastro.CEIS = uuidMsg.UUID
		//	case "AutosInfracaoIbama":
		//		cadastro.AutosInfracaoIbama = uuidMsg.UUID
		//	case "AutosInfracaoICMBIO":
		//		cadastro.AutosInfracaoICMBIO = uuidMsg.UUID
		//	case "TrabalhoEscravo":
		//		cadastro.TrabalhoEscravo = uuidMsg.UUID
		//	case "Suspensaobama":
		//		cadastro.Suspensaobama = uuidMsg.UUID
		//	case "ApreensaoIbama":
		//		cadastro.ApreensaoIbama = uuidMsg.UUID
		//	}
		//}

		if err := db.InsertCadastroBasico(cadastro); err != nil {
			log.Printf("Error saving to SQLite CADASTROBASICO for %s: %v", cadastro.CPF_CNPJ, err)
		} else {
			log.Printf("Saving to SQLite CADASTROBASICO success for: %s", cadastro.CPF_CNPJ)
		}
	}
}

func LoadCSVToDB_PEP(db *Database, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read input file: %s", err)
	}
	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading CSV file: %s", err)
		}

		// Expressão regular para remover todos os caracteres não numéricos
		re := regexp.MustCompile("[^0-9]+")
		cleanCPF := re.ReplaceAllString(record[0], "")

		pep := models.PEP{
			UUID:                  uuid.NewString(),
			CPF:                   cleanCPF, // Alterado para cleanCPF
			Nome_PEP:              strings.Trim(record[1], "\""),
			Sigla_Funcao:          strings.Trim(record[2], "\""),
			Descricao_Funcao:      strings.Trim(record[3], "\""),
			Nivel_Funcao:          strings.Trim(record[4], "\""),
			Nome_Orgao:            strings.Trim(record[5], "\""),
			Data_Inicio_Exercicio: strings.Trim(record[6], "\""),
			Data_Fim_Exercicio:    strings.Trim(record[7], "\""),
			Data_Fim_Carencia:     strings.Trim(record[8], "\""),
		}

		log.Println("Saving to SQLite PEP", pep.CPF)
		err = db.InsertPEP(pep)
		if err != nil {
			log.Println("Error saving to SQLite CEIS", pep.CPF)
			log.Println(err)
		}
	}
}

func LoadCSVToDB_CEIS(db *Database, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read input file: %s", err)
	}
	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading CSV file: %s", err)
		}

		ceis := models.CEIS{
			UUID:                          uuid.NewString(),
			Cadastro:                      strings.Trim(record[0], "\""),
			CodigoSancao:                  strings.Trim(record[1], "\""),
			TipoPessoa:                    strings.Trim(record[2], "\""),
			CPFCNPJSancionado:             strings.Trim(record[3], "\""),
			NomeSancionado:                strings.Trim(record[4], "\""),
			NomeInformadoOrgaoSancionador: strings.Trim(record[5], "\""),
			RazaoSocialCadastroReceita:    strings.Trim(record[6], "\""),
			NomeFantasiaCadastroReceita:   strings.Trim(record[7], "\""),
			NumeroProcesso:                strings.Trim(record[8], "\""),
			CategoriaSancao:               strings.Trim(record[9], "\""),
			DataInicioSancao:              strings.Trim(record[10], "\""),
			DataFinalSancao:               strings.Trim(record[11], "\""),
			DataPublicacao:                strings.Trim(record[12], "\""),
			Publicacao:                    strings.Trim(record[13], "\""),
			Detalhamento:                  strings.Trim(record[14], "\""),
			DataTransitoJulgado:           strings.Trim(record[15], "\""),
			AbrangenciaDecisaoJudicial:    strings.Trim(record[16], "\""),
			OrgaoSancionador:              strings.Trim(record[17], "\""),
			UfOrgaoSancionador:            strings.Trim(record[18], "\""),
			EsferaOrgaoSancionador:        strings.Trim(record[19], "\""),
			FundamentacaoLegal:            strings.Trim(record[20], "\""),
		}

		log.Println("Saving to SQLite CEIS", ceis.CPFCNPJSancionado)
		err = db.InsertCEIS(ceis)
		if err != nil {
			log.Println("Error saving to SQLite CEIS", ceis.CPFCNPJSancionado)
			log.Println(err)
		}
	}
}

func LoadCSVToDB_CNEP(db *Database, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read CNEP input file: %s", err)
	}

	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading CNEP CSV file: %s", err)
			return
		}

		cnep := models.CNEP{
			UUID:                          uuid.NewString(),
			Cadastro:                      strings.Trim(record[0], "\""),
			CodigoSancao:                  strings.Trim(record[1], "\""),
			TipoPessoa:                    strings.Trim(record[2], "\""),
			CPFCNPJSancionado:             strings.Trim(record[3], "\""),
			NomeSancionado:                strings.Trim(record[4], "\""),
			NomeInformadoOrgaoSancionador: strings.Trim(record[5], "\""),
			RazaoSocialCadastroReceita:    strings.Trim(record[6], "\""),
			NomeFantasiaCadastroReceita:   strings.Trim(record[7], "\""),
			NumeroProcesso:                strings.Trim(record[8], "\""),
			CategoriaSancao:               strings.Trim(record[9], "\""),
			ValorMulta:                    strings.Trim(record[10], "\""),
			DataInicioSancao:              strings.Trim(record[11], "\""),
			DataFinalSancao:               strings.Trim(record[12], "\""),
			DataPublicacao:                strings.Trim(record[13], "\""),
			Publicacao:                    strings.Trim(record[14], "\""),
			Detalhamento:                  strings.Trim(record[15], "\""),
			DataTransitoJulgado:           strings.Trim(record[16], "\""),
			AbrangenciaDecisaoJudicial:    strings.Trim(record[17], "\""),
			OrgaoSancionador:              strings.Trim(record[18], "\""),
			UfOrgaoSancionador:            strings.Trim(record[19], "\""),
			EsferaOrgaoSancionador:        strings.Trim(record[20], "\""),
			FundamentacaoLegal:            strings.Trim(record[21], "\""),
		}

		log.Println("Saving to SQLite CNEP", cnep.CPFCNPJSancionado)
		err = db.InsertCNEP(cnep)
		if err != nil {
			log.Println("Error saving to SQLite CNEP", cnep.CPFCNPJSancionado)
			log.Println(err)

		}

	}
}

func LoadCSVToDB_AutosInfracaoIbama(db *Database, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read AutosInfracaoIbama input file: %s", err)
	}

	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Printf("Error reading AutosInfracaoIbama CSV file: %s", err) // changed here
			continue                                                         // added here

		} else {

			autoInfracao := models.AutosInfracaoIbama{
				UUID:                 uuid.NewString(),
				SeqAutoInfracao:      strings.Trim(record[0], "\""),
				NumAutoInfracao:      strings.Trim(record[1], "\""),
				SerAutoInfracao:      strings.Trim(record[2], "\""),
				TipoAuto:             strings.Trim(record[3], "\""),
				TipoMulta:            strings.Trim(record[4], "\""),
				ValAutoInfracao:      strings.Trim(record[5], "\""),
				PatrimonioApuracao:   strings.Trim(record[6], "\""),
				GravidadeInfracao:    strings.Trim(record[7], "\""),
				UnidArrecadacao:      strings.Trim(record[8], "\""),
				DesAutoInfracao:      strings.Trim(record[9], "\""),
				DatHoraAutoInfracao:  strings.Trim(record[10], "\""),
				DatCienciaAutuacao:   strings.Trim(record[12], "\""),
				CodMunicipio:         strings.Trim(record[13], "\""),
				Municipio:            strings.Trim(record[14], "\""),
				Uf:                   strings.Trim(record[15], "\""),
				NumProcesso:          strings.Trim(record[16], "\""),
				CodInfracao:          strings.Trim(record[17], "\""),
				DesInfracao:          strings.Trim(record[18], "\""),
				TipoInfracao:         strings.Trim(record[19], "\""),
				NomeInfrator:         strings.Trim(record[20], "\""),
				CpfCnpjInfrator:      strings.Trim(record[21], "\""),
				DesLocalInfracao:     strings.Trim(record[28], "\""),
				NotificacaoVinculada: strings.Trim(record[29], "\""),
				AcaoFiscalizatoria:   strings.Trim(record[30], "\""),
				UnidControle:         strings.Trim(record[31], "\""),
				TipoAcao:             strings.Trim(record[32], "\""),
				Operacao:             strings.Trim(record[33], "\""),
				DatLancamento:        strings.Trim(record[38], "\""),
			}

			log.Println("Saving to SQLite AutosInfracaoIbama ", autoInfracao.SeqAutoInfracao)
			err = db.InsertAutosInfracaoIbama(autoInfracao)
			if err != nil {
				log.Println("Error saving to SQLite AutosInfracaoIbama", autoInfracao.SeqAutoInfracao)
				log.Println(err)
			}
		}
	}
}

func LoadCSVToDB_AutosInfracaoICMBIO(db *Database, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read AutosInfracaoICMBIO input file: %s", err)
	}

	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading AutosInfracaoICMBIO CSV file: %s", err)
			return
		}

		autoInfracao := models.AutosInfracaoICMBIO{
			UUID:              uuid.NewString(),
			ID:                strings.Trim(record[0], "\""),
			NumeroAI:          strings.Trim(record[1], "\""),
			Serie:             strings.Trim(record[2], "\""),
			Origem:            strings.Trim(record[3], "\""),
			Tipo:              strings.Trim(record[4], "\""),
			ValorMulta:        strings.Trim(record[5], "\""),
			Embargo:           strings.Trim(record[6], "\""),
			Apreensao:         strings.Trim(record[7], "\""),
			Autuado:           strings.Trim(record[8], "\""),
			CPFCNPJ:           strings.Trim(record[9], "\""),
			DescricaoAI:       strings.Trim(record[10], "\""),
			DescricaoSancoes:  strings.Trim(record[11], "\""),
			Data:              strings.Trim(record[12], "\""),
			Ano:               strings.Trim(record[13], "\""),
			Artigo1:           strings.Trim(record[14], "\""),
			Artigo2:           strings.Trim(record[15], "\""),
			TipoInfracao:      strings.Trim(record[16], "\""),
			NomeUC:            strings.Trim(record[17], "\""),
			CNUC:              strings.Trim(record[18], "\""),
			Municipio:         strings.Trim(record[19], "\""),
			UF:                strings.Trim(record[20], "\""),
			TermosEmbargo:     strings.Trim(record[21], "\""),
			TermosApreensao:   strings.Trim(record[22], "\""),
			OrdemFiscalizacao: strings.Trim(record[23], "\""),
			Processo:          strings.Trim(record[24], "\""),
			Julgamento:        strings.Trim(record[25], "\""),
		}

		log.Println("Saving to SQLite AutosInfracaoICMBIO ", autoInfracao.ID)
		err = db.InsertAutosInfracaoICMBIO(autoInfracao)
		if err != nil {
			log.Println("Error saving to SQLite AutosInfracaoICMBIO", autoInfracao.ID)
			log.Println(err)
		}
	}
}

func LoadCSVToDB_TrabalhoEscravo(db *Database, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read TrabalhoEscravo input file: %s", err)
	}

	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading TrabalhoEscravo CSV file: %s", err)
			return
		}

		trabalhoEscravo := models.TrabalhoEscravo{
			UUID:                         uuid.NewString(),
			ID:                           strings.Trim(record[0], "\""),
			AnoAcaoFiscal:                strings.Trim(record[1], "\""),
			UF:                           strings.Trim(record[2], "\""),
			Empregador:                   strings.Trim(record[3], "\""),
			CNPJCPF:                      strings.Trim(record[4], "\""),
			Estabelecimento:              strings.Trim(record[5], "\""),
			TrabalhadoresEnvolvidos:      strings.Trim(record[6], "\""),
			CNAE:                         strings.Trim(record[7], "\""),
			DecisaoAdministrativa:        strings.Trim(record[8], "\""),
			InclusaoCadastroEmpregadores: strings.Trim(record[9], "\""),
		}

		log.Println("Saving to SQLite TrabalhoEscravo ", trabalhoEscravo.ID)
		err = db.InsertTrabalhoEscravo(trabalhoEscravo)
		if err != nil {
			log.Println("Error saving to SQLite TrabalhoEscravo", trabalhoEscravo.ID)
			log.Println(err)
		}
	}
}

func LoadCSVToDB_Suspensaobama(db *Database, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read Suspensaobama input file: %s", err)
	}

	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading Suspensaobama CSV file: %s", err)
			return
		}

		suspensaobama := models.Suspensaobama{
			UUID:                      uuid.NewString(),
			SEQ_TAD:                   strings.Trim(record[0], "\""),
			STATUS_FORMULARIO:         strings.Trim(record[1], "\""),
			SIT_CANCELADO:             strings.Trim(record[2], "\""),
			NUM_TAD:                   strings.Trim(record[3], "\""),
			SER_TAD:                   strings.Trim(record[4], "\""),
			DAT_TAD:                   strings.Trim(record[5], "\""),
			DAT_IMPRESSAO:             strings.Trim(record[6], "\""),
			NUM_PESSOA_SUSPENSAO:      strings.Trim(record[7], "\""),
			NOM_PESSOA_SUSPENSAO:      strings.Trim(record[8], "\""),
			CPF_CNPJ_PESSOA_SUSPENSAO: strings.Trim(record[9], "\""),
			NUM_PROCESSO:              strings.Trim(record[10], "\""),
			DES_TAD:                   strings.Trim(record[11], "\""),
			COD_MUNICIPIO:             strings.Trim(record[12], "\""),
			NOM_MUNICIPIO:             strings.Trim(record[13], "\""),
			SIG_UF:                    strings.Trim(record[14], "\""),
			DES_LOCALIZACAO:           strings.Trim(record[15], "\""),
			DES_JUSTIFICATIVA:         strings.Trim(record[18], "\""),
			FORMA_ENTREGA:             strings.Trim(record[19], "\""),
			UNID_APRESENTACAO:         strings.Trim(record[20], "\""),
			UNID_CONTROLE:             strings.Trim(record[21], "\""),
			SEQ_AUTO_INFRACAO:         strings.Trim(record[22], "\""),
			SEQ_NOTIFICACAO:           strings.Trim(record[23], "\""),
			SEQ_ACAO_FISCALIZATORIA:   strings.Trim(record[24], "\""),
			SEQ_ORDEM_FISCALIZACAO:    strings.Trim(record[25], "\""),
			NUM_ORDEM_FISCALIZACAO:    strings.Trim(record[26], "\""),
		}

		log.Println("Saving to SQLite Suspensaobama ", suspensaobama.SEQ_TAD)
		err = db.InsertSuspensaobama(suspensaobama)
		if err != nil {
			log.Println("Error saving to SQLite Suspensaobama", suspensaobama.SEQ_TAD)
			log.Println(err)
		}
	}
}

func LoadCSVToDB_ApreensaoIbama(db *Database, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read ApreensaoIbama input file: %s", err)
	}

	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading ApreensaoIbama CSV file: %s", err)
			return
		}

		apreensaoibama := models.ApreensaoIbama{
			UUID:                      uuid.NewString(),
			SEQ_TAD:                   record[0],
			STATUS_FORMULARIO:         record[1],
			SIT_CANCELADO:             record[2],
			NUM_TAD:                   record[3],
			SER_TAD:                   record[4],
			DAT_TAD:                   record[5],
			DAT_IMPRESSAO:             record[6],
			NUM_PESSOA_SUSPENSAO:      record[7],
			NOM_PESSOA_SUSPENSAO:      record[8],
			CPF_CNPJ_PESSOA_SUSPENSAO: record[9],
			NUM_PROCESSO:              record[10],
			DES_TAD:                   record[11],
			COD_MUNICIPIO:             record[12],
			NOM_MUNICIPIO:             record[13],
			SIG_UF:                    record[14],
			DES_LOCALIZACAO:           record[15],
			FORMA_ENTREGA:             record[18],
			UNID_APRESENTACAO:         record[19],
			UNID_CONTROLE:             record[20],
			SEQ_AUTO_INFRACAO:         record[21],
			SEQ_NOTIFICACAO:           record[22],
			SEQ_ACAO_FISCALIZATORIA:   record[23],
			SEQ_ORDEM_FISCALIZACAO:    record[24],
			NUM_ORDEM_FISCALIZACAO:    record[25],
		}

		log.Println("Saving to SQLite ApreensaoIbama ", apreensaoibama.SEQ_TAD)
		err = db.InsertApreensaoIbama(apreensaoibama)
		if err != nil {
			log.Println("Error saving to SQLite apreensaoibama", apreensaoibama.SEQ_TAD)
			log.Println(err)
		}
	}
}

func LoadAllCSVs(dirPath string) {

	db := &Database{}

	err := db.Open()
	if err != nil {
		log.Fatalf("Failed to open database: %v", err)
	}
	defer db.Close()

	err = db.InitTables()
	if err != nil {
		log.Fatalf("Failed to initialize tables: %v", err)
	}

	files, err := os.ReadDir(dirPath)
	if err != nil {
		log.Fatal(err)
	}
	var wg sync.WaitGroup
	for _, file := range files {
		if filepath.Ext(file.Name()) == ".csv" {
			wg.Add(1)
			go func(file os.DirEntry) {
				defer wg.Done()
				filePath := filepath.Join(dirPath, file.Name())
				switch {
				case strings.Contains(strings.ToLower(file.Name()), "pep"):
					LoadCSVToDB_PEP(db, filePath)
				case strings.Contains(strings.ToLower(file.Name()), "ceis"):
					LoadCSVToDB_CEIS(db, filePath)
				case strings.Contains(strings.ToLower(file.Name()), "cnep"):
					LoadCSVToDB_CNEP(db, filePath)
				case strings.Contains(strings.ToLower(file.Name()), "infracao_ibama"):
					LoadCSVToDB_AutosInfracaoIbama(db, filePath)
				case strings.Contains(strings.ToLower(file.Name()), "icmbio"):
					LoadCSVToDB_AutosInfracaoICMBIO(db, filePath)
				case strings.Contains(strings.ToLower(file.Name()), "escravo"):
					LoadCSVToDB_TrabalhoEscravo(db, filePath)
				case strings.Contains(strings.ToLower(file.Name()), "suspensaibama"):
					LoadCSVToDB_Suspensaobama(db, filePath)
				case strings.Contains(strings.ToLower(file.Name()), "apreensao"):
					LoadCSVToDB_ApreensaoIbama(db, filePath)
				default:
					log.Printf("No suitable function for the file %s", filePath)
				}
			}(file)
		}
	}
	wg.Wait()

}
