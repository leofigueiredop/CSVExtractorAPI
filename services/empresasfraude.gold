package services

import (
	"CSVExtractor/models"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"github.com/google/uuid"
	"golang.org/x/text/encoding/charmap"
	"io"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strings"
	"sync"
)

type Sanction struct {
	CPFCNPJ    string
	Nome       string
	Cadastro   string
	Estado     string
	Orgao      string
	Categoria  string
	Data       string
	ValorMulta string
	Quantidade string
}

type CEPIM1 struct {
	CNPJEntidade   string
	NomeEntidade   string
	NumeroConvenio string
	Orgao          string
	Motivo         string
}
type CEPIM2 struct {
	CNPJ       string
	Nome       string
	UF         string
	Motivo     string
	Orgao      string
	Convenio   string
	Quantidade string
}

type empresaFraude struct {
	CNPJ      string                   `json:"cnpj"`
	Registros []models.RESULTAMBIENTAL `json:"registros"`
}

var (
	sanctionsData       = make(map[string][]Sanction)
	ceisData            = make(map[string][]models.CEIS)
	cnepData            = make(map[string][]models.CNEP)
	cepim1Data          = make(map[string][]CEPIM1)
	cepim2              = make(map[string][]CEPIM2)
	trabalhoEscravoData = make(map[string][]models.TrabalhoEscravo)
)

func LoadCSVToMemory_Sancionado(filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read input file: %s", err)
	}
	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'
	csvReader.LazyQuotes = true

	// Regular expression to remove all non-numeric characters
	re := regexp.MustCompile("[^0-9]+")

	// Read the CSV records
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading CEPIM2 CSV file: %s", err)
		}

		for i, val := range record {
			record[i] = strings.Trim(val, "\"")
		}

		// Clean, keep only numbers for CNPJ
		cleanedCNPJ := re.ReplaceAllString(record[0], "")

		sancionadoRecord := CEPIM2{
			CNPJ:       cleanedCNPJ,
			Nome:       record[1],
			UF:         record[2],
			Motivo:     record[3],
			Orgao:      record[4],
			Convenio:   record[5],
			Quantidade: record[6],
		}

		log.Printf("Loading to memory CEPIM2 Record with CNPJ %s\n", cleanedCNPJ)
		cepim2[cleanedCNPJ] = append(cepim2[cleanedCNPJ], sancionadoRecord)
	}
	log.Println("Loading to memory CEPIM2 has completed.")
}

func LoadCSVToMemory_CEPIM1(filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read input file: %s", err)
	}
	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'
	csvReader.LazyQuotes = true

	// Regular expression to remove all non-numeric characters
	re := regexp.MustCompile("[^0-9]+")

	// Read the CSV records
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading Entidades CSV file: %s", err)
		}

		for i, val := range record {
			record[i] = strings.Trim(val, "\"")
		}

		// Clean, keep only numbers for CNPJs
		cleanedCNPJ := re.ReplaceAllString(record[0], "")

		entidadeRecord := CEPIM1{
			CNPJEntidade:   cleanedCNPJ,
			NomeEntidade:   record[1],
			NumeroConvenio: record[2],
			Orgao:          record[3],
			Motivo:         record[4],
		}

		log.Printf("Loading to memory CEPIM1 Record with CNPJ %s\n", cleanedCNPJ)
		cepim1Data[cleanedCNPJ] = append(cepim1Data[cleanedCNPJ], entidadeRecord)
	}
	log.Println("Loading to memory Entidades has complete.")
}

func LoadCSVToMemory_Sanctions(filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read input file: %s", err)
	}
	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'
	csvReader.LazyQuotes = true

	// Regular expression to remove all non-numeric characters
	re := regexp.MustCompile("[^0-9,]+")

	// Read the CSV records
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading Sanctions CSV file: %s", err)
		}

		for i, val := range record {
			record[i] = strings.Trim(val, "\"")
		}
		// Clean, keep only numbers and commas for CNPJs
		cleanedCNPJs := re.ReplaceAllString(record[0], "")
		// Split multiple CNPJs by comma
		cleanedCNPJsArray := strings.Split(cleanedCNPJs, ",")

		sanctionRecord := Sanction{
			Nome:       record[1],
			Cadastro:   record[2],
			Estado:     record[3],
			Orgao:      record[4],
			Categoria:  record[5],
			Data:       record[6],
			ValorMulta: record[7],
			Quantidade: record[8],
		}

		for _, cnpj := range cleanedCNPJsArray {
			if cnpj != "" {
				log.Printf("Loading to memory Sanctions Record with CNPJ/CPF %s\n", cnpj)
				sanctionsData[cnpj] = append(sanctionsData[cnpj], sanctionRecord)
			}
		}
	}
	log.Println("Loading to memory Sanctions has complete.")
}

func LoadCSVToMemory_CEIS(filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read input file: %s", err)
	}
	defer file.Close()
	r := charmap.ISO8859_1.NewDecoder().Reader(file)
	csvReader := csv.NewReader(r)
	csvReader.Comma = ';'

	// Expressão regular para remover todos os caracteres não numéricos
	re := regexp.MustCompile("[^0-9]+")

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading CSV file: %s", err)
		}

		cleanCPF := re.ReplaceAllString(record[3], "")

		ceis := models.CEIS{
			UUID:                          uuid.NewString(),
			Cadastro:                      strings.Trim(record[0], "\""),
			CodigoSancao:                  strings.Trim(record[1], "\""),
			CPFCNPJSancionado:             cleanCPF,
			NomeSancionado:                strings.Trim(record[4], "\""),
			NomeInformadoOrgaoSancionador: strings.Trim(record[5], "\""),
			RazaoSocialCadastroReceita:    strings.Trim(record[6], "\""),
			NomeFantasiaCadastroReceita:   strings.Trim(record[7], "\""),
			NumeroProcesso:                strings.Trim(record[8], "\""),
			CategoriaSancao:               strings.Trim(record[9], "\""),
			DataInicioSancao:              strings.Trim(record[10], "\""),
			DataFinalSancao:               strings.Trim(record[11], "\""),
			DataPublicacao:                strings.Trim(record[12], "\""),
			Publicacao:                    strings.Trim(record[13], "\""),
			Detalhamento:                  strings.Trim(record[14], "\""),
			DataTransitoJulgado:           strings.Trim(record[15], "\""),
			AbrangenciaDecisaoJudicial:    strings.Trim(record[16], "\""),
			OrgaoSancionador:              strings.Trim(record[17], "\""),
			UfOrgaoSancionador:            strings.Trim(record[18], "\""),
			FundamentacaoLegal:            strings.Trim(record[20], "\""),
		}

		log.Println("Loading to memory CEIS", ceis.CPFCNPJSancionado)
		ceisData[cleanCPF] = append(ceisData[cleanCPF], ceis)
	}
}

func LoadCSVToMemory_CNEP(filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read CNEP input file: %s", err)
	}

	defer file.Close()

	r := charmap.ISO8859_1.NewDecoder().Reader(file)
	csvReader := csv.NewReader(r)
	csvReader.Comma = ';'

	// Expressão regular para remover todos os caracteres não numéricos
	re := regexp.MustCompile("[^0-9]+")

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading CNEP CSV file: %s", err)
			return
		}

		cleanCPF := re.ReplaceAllString(record[3], "")

		cnep := models.CNEP{
			UUID:                          uuid.NewString(),
			Cadastro:                      strings.Trim(record[0], "\""),
			CodigoSancao:                  strings.Trim(record[1], "\""),
			CPFCNPJSancionado:             cleanCPF,
			NomeSancionado:                strings.Trim(record[4], "\""),
			NomeInformadoOrgaoSancionador: strings.Trim(record[5], "\""),
			RazaoSocialCadastroReceita:    strings.Trim(record[6], "\""),
			NomeFantasiaCadastroReceita:   strings.Trim(record[7], "\""),
			NumeroProcesso:                strings.Trim(record[8], "\""),
			CategoriaSancao:               strings.Trim(record[9], "\""),
			ValorMulta:                    strings.Trim(record[10], "\""),
			DataInicioSancao:              strings.Trim(record[11], "\""),
			DataFinalSancao:               strings.Trim(record[12], "\""),
			DataPublicacao:                strings.Trim(record[13], "\""),
			Publicacao:                    strings.Trim(record[14], "\""),
			Detalhamento:                  strings.Trim(record[15], "\""),
			DataTransitoJulgado:           strings.Trim(record[16], "\""),
			AbrangenciaDecisaoJudicial:    strings.Trim(record[17], "\""),
			OrgaoSancionador:              strings.Trim(record[18], "\""),
			UfOrgaoSancionador:            strings.Trim(record[19], "\""),
			FundamentacaoLegal:            strings.Trim(record[21], "\""),
		}

		log.Println("Loading to memory CNEP", cnep.CPFCNPJSancionado)
		cnepData[cleanCPF] = append(cnepData[cleanCPF], cnep)
	}
}

func LoadCSVToMemory_TrabalhoEscravo(filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to read TrabalhoEscravo input file: %s", err)
	}

	defer file.Close()

	csvReader := csv.NewReader(file)
	csvReader.Comma = ';'

	// Expressão regular para remover todos os caracteres não numéricos
	re := regexp.MustCompile("[^0-9]+")

	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error reading TrabalhoEscravo CSV file: %s", err)
			return
		}

		cleanCPF := re.ReplaceAllString(record[4], "")

		trabalhoEscravo := models.TrabalhoEscravo{
			UUID:                         uuid.NewString(),
			ID:                           strings.Trim(record[0], "\""),
			AnoAcaoFiscal:                strings.Trim(record[1], "\""),
			UF:                           strings.Trim(record[2], "\""),
			Empregador:                   strings.Trim(record[3], "\""),
			CNPJCPF:                      cleanCPF,
			Estabelecimento:              strings.Trim(record[5], "\""),
			TrabalhadoresEnvolvidos:      strings.Trim(record[6], "\""),
			CNAE:                         strings.Trim(record[7], "\""),
			DecisaoAdministrativa:        strings.Trim(record[8], "\""),
			InclusaoCadastroEmpregadores: strings.Trim(record[9], "\""),
		}

		log.Println("Loading to memory TrabalhoEscravo ", trabalhoEscravo.ID)
		trabalhoEscravoData[cleanCPF] = append(trabalhoEscravoData[cleanCPF], trabalhoEscravo)
	}
}

func ProcessarFraude(filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Println("Unable to read input file ", filePath, ". Error: ", err)
		return
	}
	defer file.Close()

	reader := csv.NewReader(file)
	reader.Comma = ';'
	reader.LazyQuotes = true
	reader.FieldsPerRecord = -1

	isFirstRow := true
	var finalCompanies []models.RESULTAMBIENTAL
	for {
		// Read each record from csv
		record, err := reader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Println("Error reading the file records: ", err)
			continue
		}
		// Skip the header
		if isFirstRow {
			isFirstRow = false
			continue
		}
		tipoPessoa := record[0]
		if tipoPessoa == "PJ" {
			cnpj := record[1]
			cnpjBase := fmt.Sprintf("%014s", cnpj)

			// Process sanctionsData
			if records, ok := sanctionsData[cnpjBase]; ok {
				for _, record := range records {
					r := models.RESULTAMBIENTAL{
						DATASET:     "FRAUDE_CORRUPCAO",
						TIPO:        "SANCAO",
						CPFCNPJ:     cnpjBase,
						CODCONTROLE: record.Cadastro,
						Data:        record.Data,
						NumProcesso: "",
						Descricao:   fmt.Sprintf("Orgao: %s  - Categoria: %s - Valor Multa: %s ", record.Orgao, record.Categoria, record.ValorMulta),
					}
					finalCompanies = append(finalCompanies, r)
				}
			}

			// Process ceisData
			if records, ok := ceisData[cnpjBase]; ok {
				for _, record := range records {
					r := models.RESULTAMBIENTAL{
						DATASET:     "FRAUDE_CORRUPCAO",
						TIPO:        "CEIS",
						CPFCNPJ:     cnpjBase,
						CODCONTROLE: record.CodigoSancao,
						Data:        record.DataPublicacao,
						NumProcesso: record.NumeroProcesso,
						Descricao:   fmt.Sprintf("Orgao: %s  - Categoria: %s - Descricao: %s | %s", record.OrgaoSancionador, record.CategoriaSancao, record.Detalhamento, record.FundamentacaoLegal),
					}
					finalCompanies = append(finalCompanies, r)
				}
			}

			// Process cnepData
			if records, ok := cnepData[cnpjBase]; ok {
				for _, record := range records {
					r := models.RESULTAMBIENTAL{
						DATASET:     "FRAUDE_CORRUPCAO",
						TIPO:        "CNEP",
						CPFCNPJ:     cnpjBase,
						CODCONTROLE: record.CodigoSancao,
						Data:        record.DataPublicacao,
						NumProcesso: record.NumeroProcesso,
						Descricao:   fmt.Sprintf("Orgao: %s  - Categoria: %s - Descricao: %s | %s", record.OrgaoSancionador, record.CategoriaSancao, record.Detalhamento, record.FundamentacaoLegal),
					}
					finalCompanies = append(finalCompanies, r)
				}
			}

			// Process trabalhoEscravoData
			if records, ok := trabalhoEscravoData[cnpjBase]; ok {
				for _, record := range records {
					r := models.RESULTAMBIENTAL{
						DATASET:     "FRAUDE_CORRUPCAO",
						TIPO:        "TRABALHO_ESCRAVO",
						CPFCNPJ:     cnpjBase,
						CODCONTROLE: record.ID,
						Data:        record.AnoAcaoFiscal,
						NumProcesso: "",
						Descricao:   record.DecisaoAdministrativa,
					}
					finalCompanies = append(finalCompanies, r)
				}
			}

			// Process cepim1Data
			if records, ok := cepim1Data[cnpjBase]; ok {
				for _, record := range records {
					r := models.RESULTAMBIENTAL{
						DATASET:     "FRAUDE_CORRUPCAO",
						TIPO:        "CEPIM",
						CPFCNPJ:     cnpjBase,
						CODCONTROLE: record.NumeroConvenio,
						Data:        "",
						NumProcesso: "",
						Descricao:   record.Motivo,
					}
					finalCompanies = append(finalCompanies, r)
				}
			}

			// Process sancionadoData
			if records, ok := cepim2[cnpjBase]; ok {
				for _, record := range records {
					r := models.RESULTAMBIENTAL{
						DATASET:     "FRAUDE_CORRUPCAO",
						TIPO:        "CEPIM",
						CPFCNPJ:     cnpjBase,
						CODCONTROLE: record.Convenio,
						Data:        "",
						NumProcesso: "",
						Descricao:   record.Motivo,
					}
					finalCompanies = append(finalCompanies, r)
				}
			}

		}
	}

	// create JSON from finalCompanies slice
	jsonData, err := json.MarshalIndent(finalCompanies, "", " ")
	if err != nil {
		log.Fatal(err)
	}

	// write JSON data to a file only if there is data to write
	if len(finalCompanies) > 0 {
		err = os.WriteFile("resultFraude.json", jsonData, 0644)
		if err != nil {
			log.Fatal(err)
		}
	}
}

func LoadAllCSVs_Fraude(dirPath string) {

	files, err := os.ReadDir(dirPath)
	if err != nil {
		log.Fatal(err)
	}
	var wg sync.WaitGroup
	for _, file := range files {
		if filepath.Ext(file.Name()) == ".csv" {
			wg.Add(1)
			go func(file os.DirEntry) {
				defer wg.Done()
				filePath := filepath.Join(dirPath, file.Name())
				switch {
				case strings.Contains(strings.ToLower(file.Name()), "ceis"):
					LoadCSVToMemory_CEIS(filePath)
				case strings.Contains(strings.ToLower(file.Name()), "cnep"):
					LoadCSVToMemory_CNEP(filePath)
				case strings.Contains(strings.ToLower(file.Name()), "escravo"):
					LoadCSVToMemory_TrabalhoEscravo(filePath)
				case strings.Contains(strings.ToLower(file.Name()), "sancoes"):
					LoadCSVToMemory_Sanctions(filePath)
				case strings.Contains(strings.ToLower(file.Name()), "cepim1"):
					LoadCSVToMemory_CEPIM1(filePath)
				case strings.Contains(strings.ToLower(file.Name()), "cepim2"):
					LoadCSVToMemory_Sancionado(filePath)
				default:
					log.Printf("No suitable function for the file %s", filePath)
				}
			}(file)
		}
	}
	wg.Wait()
}
